name: Test Micropip Installation (Wheel)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-micropip-wheel:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # Step 1: Build the wheel
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install build tools
      run: |
        python -m pip install build wheel

    - name: Build wheel
      id: build-wheel
      run: |
        python -m build --wheel
        WHEEL_NAME=$(ls dist/*.whl)
        echo "WHEEL_NAME=${WHEEL_NAME}" >> $GITHUB_ENV
        echo "WHEEL_BASENAME=$(basename ${WHEEL_NAME})" >> $GITHUB_ENV
        ls -la dist/

    # Step 2: Test with Pyodide
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Pyodide and HTTP server
      run: |
        npm init -y --silent
        npm install pyodide@0.25.0 http-server

    - name: Run micropip test with wheel
      run: |
        # Start HTTP server in background
        npx http-server dist -p 8080 --cors -s &
        SERVER_PID=$!

        cat <<EOF > test_jquantstats.js
        const { loadPyodide } = require("pyodide");

        async function testInstall() {
          console.log("[1/5] Initializing Pyodide...");
          let pyodide = await loadPyodide({
            stdout: console.log,
            stderr: console.error
          });

          console.log("[2/5] Loading micropip...");
          await pyodide.loadPackage("micropip");

          const wheelUrl = "http://localhost:8080/${WHEEL_BASENAME}";
          console.log("[3/5] Installing from URL:", wheelUrl);

          try {
            const micropip = pyodide.pyimport("micropip");
            await micropip.install(wheelUrl);

            console.log("[4/5] Running tests...");
            pyodide.runPython(\`
              import jquantstats
              print(f"Package version: {jquantstats.__version__}")

              try:
                  print("Running smoke tests...")
                  assert jquantstats.__version__ is not None
                  print("All tests passed!")
              except Exception as e:
                  print(f"Test failed: {str(e)}")
                  raise
            \`);
          } catch (e) {
            console.error("Installation error:", e.toString());
            if (pyodide.runPython("'__version__' in dir()")) {
              console.error("Python error:", pyodide.runPython("str(e)"));
            }
            throw e;
          }
        }

        testInstall()
          .then(() => {
            console.log("[5/5] Success!");
            process.exit(0);
          })
          .catch(e => {
            console.error("Test failed:", e);
            process.exit(1);
          })
          .finally(() => {
            process.kill(${SERVER_PID});
          });
        EOF

        echo "Testing with wheel: ${WHEEL_BASENAME}"
        node test_jquantstats.js
