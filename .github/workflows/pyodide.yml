name: Pyodide Test

on: [push, pull_request]

jobs:
  pyodide-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build wheel
        run: |
          pip install build
          python -m build

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: |
          npm install puppeteer http-server

      - name: Create test.html
        run: |
          mkdir -p test
          cat <<EOF > test/test.html
          <!DOCTYPE html>
          <html>
          <head>
            <script src="https://cdn.jsdelivr.net/pyodide/v0.25.1/full/pyodide.js"></script>
          </head>
          <body>
            <script>
              async function run() {
                const pyodide = await loadPyodide({ indexURL: "https://cdn.jsdelivr.net/pyodide/v0.25.1/full/" });
                const wheel = location.hash.substring(1);
                const url = \`http://localhost:8000/dist/\${wheel}\`;
                await pyodide.loadPackage("micropip");
                await pyodide.runPythonAsync(\`
                  import micropip
                  await micropip.install("\${url}")
                  import jquantstats
                  print("âœ… jquantstats successfully imported")
                \`);
              }
              run();
            </script>
          </body>
          </html>
          EOF

      - name: Serve and test Pyodide wheel
        run: |
          npx http-server -p 8000 . &
          sleep 3

          node --input-type=module <<'EOF'
          import { launch } from 'puppeteer';
          import fs from 'fs';

          const wheel = fs.readdirSync('./dist').find(f => f.endsWith('.whl'));

          const browser = await launch({ headless: "new" });
          const page = await browser.newPage();

          page.on('console', msg => {
            console.log("Browser log:", msg.text());
          });

          await page.goto(`http://localhost:8000/test/test.html#${wheel}`, {
            waitUntil: 'load'
          });

          await page.waitForTimeout(10000);
          await browser.close();
          EOF
